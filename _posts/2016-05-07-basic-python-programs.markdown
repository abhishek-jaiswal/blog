---
layout: post
title:  "Basic Python Programs"
date:   2016-05-07 20:10:10
categories: python
tags: featured
image: /blog/assets/article_images/longway.jpg
---
<section class="container content">
   <div class="title">
        <h1>Basic Python Programs</h1>
        <div class="when">2016-05-07 20:10:10</div>
    </div>

<div id='content'></div>

### os.walk
This function takes the name of a directory  and prints out the paths files within that  directory as well as any files contained in  contained directories. 

{% highlight python %}
import os
def print_directory_contents(sPath):
                                           
    for sChild in os.listdir(sPath):                
        sChildPath = os.path.join(sPath,sChild)
        if os.path.isdir(sChildPath):
            print_directory_contents(sChildPath)
        else:
            print(sChildPath)

{% endhighlight %}


### Multiples of 3 and 5
if we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.

{% highlight python %}
def func_mul_3_5(num):
	"""
	problem:
	if we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
	The sum of these multiples is 23.
	Find the sum of all the multiples of 3 or 5 below 1000.
	"""
	for i in range(1, num):
		if (i%3 == 0) or (i%5 == 0):
			yield i

print sum(list(func_mul_3_5(1000)))


def func_mul_3_5(num):
    """
    problem:
    if we list all the natural numbers below 10 that are multiples of 3 or 5,
    we get 3, 5, 6 and 9.
    The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.
    """
    result = 0
    for i in range(1, num):
        if (i%3 == 0) or (i%5 == 0):
            result += i
    return result

print (func_mul_3_5(1000)
{% endhighlight %}


### Fibonacci Series
print the fibonacci series  

{% highlight python %}
def fib(num):
    a, b = 0, 1
    while num > 0:          # First iteration:
        yield a             # yield 0 to start with and then
        a, b = b, a + b     # a will now be 1, and b will also be 1, (0 + 1)
        num -=1
print(list(fib(10)))
{% endhighlight %}


### Even Fibonacci numbers
Each new term in the Fibonacci sequence is generated by adding the previous
two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not
exceed four million, find the sum of the even-valued terms.
4000000
{% highlight python %}
def sum_even_fib2(num):
    prev, cur = 0, 1
    total = 0
    while True:
        prev, cur = cur, prev + cur
        if cur >= num:
            break
        if cur % 2 == 0:
            total += cur
    print(total)
sum_even_fib2(4000000)
{% endhighlight %}
